openapi: 3.0.1
info:
  title: Reservation Bear API
  description: |-
    The documentation of the REST api of Reservation Bear.
    A reference implementation is available on [Github](https://github.com/Eistbaren/client)
  version: 1.1.1
servers:
- url: /api/
tags:
- name: restaurant
  description: Restaurants
- name: table
  description: Tables
- name: reservation
  description: Reservations
- name: image
  description: Images
paths:
  /restaurant:
    get:
      tags:
      - restaurant
      summary: get and filter restaurants
      operationId: getRestaurants
      parameters:
      - name: filters
        in: query
        description: |-
          available filters: \
          **query**: *string*, query for seaching restaurants \
          **type**: *string*, type of restaurant e.g. Italian \
          **priceCategory**: *integer (1-3)* \
          **location**: *array[lat, lon]* \
          **radius**: *integer*, radius around the location to search \
          **averageRating**: *integer (1-5)* \
          **time**: *array[unix-timestamp, unix-timestamp]* from (first) and to (second) as unix timestamps \
          **numberVisitors**: *integer* \
          The filters are provided as array elements in the format `key=value`.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            format: special
      - name: currentPage
        in: query
        schema:
          type: integer
      - name: pageSize
        in: query
        schema:
          type: integer
      responses:
        200:
          description: detailed information about all restaurants matching the filters
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Paginated"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Restaurant'
  /restaurant/{id}:
    get:
      tags:
      - restaurant
      summary: get detailed information about a restaurant
      operationId: getRestaurant
      parameters:
      - name: id
        in: path
        description: id of the restaurant
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: detailed information about the restaurant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
  /restaurant/{id}/comment:
    get:
      tags:
      - restaurant
      summary: get user- comments and reviews of a restaurant
      operationId: getRestaurantComments
      parameters:
      - name: id
        in: path
        description: id of the restaurant
        required: true
        schema:
          type: string
          format: uuid
      - name: currentPage
        in: query
        schema:
          type: integer
      - name: pageSize
        in: query
        schema:
          type: integer
      responses:
        200:
          description: user comments- and reviews of the restaurant
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Paginated"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Comment'
  /restaurant/{id}/table:
    get:
      tags:
      - restaurant
      summary: get all tables and their position in a restaurant
      operationId: getRestaurantTables
      parameters:
      - name: id
        in: path
        description: id of the restaurant
        required: true
        schema:
          type: string
          format: uuid
      - name: currentPage
        in: query
        schema:
          type: integer
      - name: pageSize
        in: query
        schema:
          type: integer
      responses:
        200:
          description: all tables in the restaurant
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Paginated"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Table'
  /restaurant/{id}/reservation:
    get:
      tags:
      - restaurant
      summary: get reserved tables of a restaurant
      operationId: getRestaurantReservations
      parameters:
      - name: id
        in: path
        description: id of the restaurant
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: beginning of the first timeslot
        required: true
        schema:
          type: integer
          format: unix-timestamp
      - name: to
        in: query
        description: ending of the last timeslot
        required: true
        schema:
          type: integer
          format: unix-timestamp
      - name: currentPage
        in: query
        schema:
          type: integer
      - name: pageSize
        in: query
        schema:
          type: integer
      responses:
        200:
          description: all timeslots within the given range. In addition to that,
            every timeslot contains a list of tables which are reserved during the
            timeslot.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Paginated"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/AnonymousReservation'
  /table/{id}:
    get:
      tags:
      - table
      summary: get detailed information about a table
      operationId: getTable
      parameters:
      - name: id
        in: path
        description: detailed informatin about the table
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: the table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
  /reservation:
    post:
      tags:
      - reservation
      summary: create a reservation
      operationId: createReservation
      requestBody:
        description: detailed information about the reservation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCreationRequest'
        required: true
      responses:
        200:
          description: detailed information about the new reservation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
      x-codegen-request-body-name: reservation
  /reservation/{id}:
    get:
      tags:
      - reservation
      summary: get detailed information about a reservation
      operationId: getReservation
      parameters:
      - name: id
        in: path
        description: the reservation id
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: detailed information about the reservation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
    delete:
      tags:
      - reservation
      summary: delete a reservation
      operationId: deleteReservation
      parameters:
      - name: id
        in: path
        description: the reservation id
        required: true
        schema:
          type: string
      responses:
        200:
          description: the deleted reservation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
    patch:
      tags:
      - reservation
      summary: confirm a reservation
      operationId: putReservation
      parameters:
      - name: id
        in: path
        description: the reservation id
        required: true
        schema:
          type: string
      - name: confirmationToken
        in: query
        description: token to confirm the reservation (distributed in the reminder
          email)
        required: true
        schema:
          type: string
          format: token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                confirmed:
                  type: boolean
        required: true
      responses:
        200:
          description: detailed information about the reservation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
      x-codegen-request-body-name: body
  /reservation/{id}/ics:
    get:
      tags:
      - reservation
      summary: get a reservation ics file
      operationId: getReservationIcs
      parameters:
      - name: id
        in: path
        description: the reservation id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: an ics file which contains the reservation
          content:
            text/calendar:
              schema:
                type: string
                format: binary
  /image/{id}:
    get:
      tags:
      - image
      summary: get an image by its id
      parameters:
      - name: id
        in: path
        description: the image id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: the requested image file
          content:
            image/png:
              schema:
                type: string
                format: binary
components:
  schemas:
    Restaurant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        images:
          type: array
          items:
            type: string
            format: uuid
        website:
          type: string
          format: uri
        openingHours:
          $ref: '#/components/schemas/Timeslot'
        averageRating:
          maximum: 5
          minimum: 1
          type: number
          format: double
        priceCategory:
          maximum: 3
          minimum: 1
          type: integer
        location:
          $ref: '#/components/schemas/GeographicCoordinates'
        floorPlan:
          $ref: '#/components/schemas/FloorPlan'
      xml:
        name: Restaurant
    Table:
      type: object
      properties:
        id:
          type: string
          format: uuid
        restaurantId:
          type: string
          format: uuid
        seats:
          type: integer
        floorPlan:
          $ref: '#/components/schemas/TableOnFloorPlan'
      xml:
        name: Table
    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tables:
          type: array
          description: ids of the reserved tables of the timeslot
          items:
            type: string
            format: uuid
        time:
          $ref: '#/components/schemas/Timeslot'
        userName:
          type: string
          format: string
        userEmail:
          type: string
          format: email
        confirmed:
          type: boolean
      xml:
        name: Reservation
    AnonymousReservation:
      type: object
      properties:
        time:
          $ref: '#/components/schemas/Timeslot'
        tables:
          type: array
          description: ids of the reserved tables of the timeslot
          items:
            type: string
            format: uuid
      description: A reservation with all personal data removed
    ReservationCreationRequest:
      type: object
      properties:
        tables:
          type: array
          items:
            type: string
            format: uuid
        time:
          $ref: '#/components/schemas/Timeslot'
        userName:
          type: string
          format: string
        userEmail:
          type: string
          format: email
      xml:
        name: ReservationCreationRequest
    Timeslot:
      type: object
      properties:
        from:
          type: integer
          format: unix-timestamp
        to:
          type: integer
          format: unix-timestamp
      description: time range between two unix timestamps
    FloorPlan:
      type: object
      properties:
        image:
          type: string
          description: image of the floor plan of the restaurant without tables
          format: uuid
        size:
          $ref: '#/components/schemas/Size'
      description: a floorplan consisting of a background image and a size
    TableOnFloorPlan:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/PixelCoordinates'
        size:
          $ref: '#/components/schemas/Size'
        image:
          type: string
          format: uuid
      description: the apperance of a table on the floorpan
    Size:
      type: object
      properties:
        width:
          type: integer
        height:
          type: integer
      description: size in pixels
    GeographicCoordinates:
      type: object
      properties:
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
      description: geographic coordinates
    PixelCoordinates:
      type: object
      properties:
        x:
          type: integer
        y:
          type: integer
      description: pixel coordinates on a canvas
    Comment:
      type: object
      properties:
        rating:
          maximum: 5
          minimum: 1
          type: integer
        comment:
          type: string
        name:
          type: string
      description: a comment about a restaurant written by a user
    Paginated:
        type: object
        properties:
          totalPages:
            type: number
          currentPage:
            type: number
          pageSize:
            type: number
          results:
            type: array
            items: {}
