swagger: '2.0'
info:
  description: >- 
    A very cool reservation system
  version: 1.0.0
  title: "Reservation Bear"
host: api.reservation-bear.de
basePath: /
tags:
  - name: restaurant
    description: Restaurants
  - name: table
    description: Tables
  - name: reservation
    description: Reservations
  - name: timeslot
    description: Timeslot
schemes:
  - https
paths:
  /restaurant:
    get:
      tags:
        - restaurant
      summary: "get and search restaurants"
      description: ""
      operationId: getRestaurants
      produces:
        - application/json
      parameters:
      - name: "filters"
        in: query
        description: "filters for seaching restaurants"
        required: false
        type: string
        format: dict
      responses:
        '200':
          description: "all different restaurants"
          schema:
            type: array
            items:
              $ref: '#/definitions/Restaurant'
  /restaurant/{id}:
    get:
      tags:
        - restaurant
      summary: "get specific restaurant"
      description: ""
      operationId: getRestaurant
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
        format: uuid
      produces:
        - application/json
      responses:
        '200':
          description: "the restaurant"
          schema:
            $ref: '#/definitions/Restaurant'
            
  /restaurant/{id}/tables:
    get:
      tags:
        - restaurant
      summary: "get all tables in the restaurant"
      description: ""
      operationId: getRestaurantTables
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
        format: uuid
      produces:
        - application/json
      responses:
        '200':
          description: "all the tables in the restaurant"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Table'
  /restaurant/{id}/timeslots:
    get:
      tags:
        - restaurant
      summary: "get timeslot infos"
      description: ""
      operationId: getRestaurantTimeslots
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
      - name: "date"
        in: query
        description: "date of reservation"
        required: true
        type: integer
        format: unix-timestamp
      produces:
        - application/json
      responses:
        '200':
          description: "all the timeslots"
          schema:
            type: array
            items:
              type: object
              properties:
                reservationId:
                  description: "null when not reserved"
                  type: string
                  format: uuid
                timeslot:
                  $ref: '#/definitions/Timeslot'
  /table/{id}:
    get:
      tags:
        - table
      summary: "get specific table"
      description: ""
      operationId: getTable
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
        format: uuid
      produces:
        - application/json
      responses:
        '200':
          description: "the table"
          schema:
            $ref: '#/definitions/Table'
  /reservation:
    post:
      tags:
        - reservation
      summary: "create a reservation"
      description: ""
      operationId: createReservation
      parameters:
      - name: "reservation"
        in: body
        description: "the reservation info"
        required: true
        schema:
          $ref: '#/definitions/Reservation' 
      produces:
        - application/json
      responses:
        '200':
          description: "the newly created reservation"
          schema:
            $ref: '#/definitions/Reservation'
  /reservation/{id}:
    get:
      tags:
        - reservation
      summary: "get a reservation"
      description: ""
      operationId: getReservation
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
        format: string
      produces:
        - application/json
      responses:
        '200':
          description: "the reservation"
          schema:
            $ref: '#/definitions/Reservation'
    put:
      tags:
        - reservation
      summary: "confirm a reservation"
      description: ""
      operationId: putReservation
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
      - name: "accept"
        in: body
        description: "acceptance of the reservation"
        required: true
        schema:
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: "the reservation"
          schema:
            $ref: '#/definitions/Reservation' 
    delete:
      tags:
        - reservation
      summary: "delete a reservation"
      description: ""
      operationId: deleteReservation
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
      produces:
        - application/json
      responses:
        '200':
          description: "the deleted reservation"
          schema:
            $ref: '#/definitions/Reservation'
  /reservation/{id}/ics:
    get:
      tags:
        - reservation
      summary: "get a reservation ics file"
      description: ""
      operationId: getReservationIcs
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
      responses:
        '200':
          description: "ics file"
          schema:
            type: file
definitions:
  Restaurant:
    type: object
    properties:
      id:
        type: string
        format: uuid
      description:
        type: string
        format: string
      price:
        type: integer
        minimum: 1
        maximum: 3
      rating:
        type: integer
        minimum: 1
        maximum: 5
      location:
        type: object
        properties:
          lat:
            type: number
            format: double
          lon:
            type: number
            format: double
      size:
        description: "size of the room"
        type: object
        properties:
          x:
            type: integer
          y:
            type: integer
      timeslots:
        type: array
        items:
          $ref: '#/definitions/Timeslot'
  
    xml:
      name: Restaurant
  Table:
    type: object
    properties:
      id:
        type: string
        format: uuid
      restaurantId:
        type: string
        format: uuid
      seats:
        type: integer
      location:
        description: "position in the room"
        type: object
        properties:
          x:
            type: integer
          y:
            type: integer
      availability:
        type: array
        items:
          $ref: '#/definitions/Timeslot'
    xml:
      name: Table
  Reservation:
    type: object
    properties:
      id:
        type: string
        format: uuid
      tables:
        type: array
        items:
          type: string
          format: uuid
      times:
        $ref: '#/definitions/Timeslot'
      userName:
        type: string
        format: string
      userEmail:
        type: string
        format: email
    xml:
      name: Reservation
  Timeslot:
    type: object
    properties:
      from:
        type: integer
        format: unix-timestamp
      to:
        type: integer
        format: unix-timestamp
externalDocs:
  description: wiki
  url: https://wiki.itsblue.de
