swagger: '2.0'
info:
  description: >- 
    The documentation of the REST api of Reservation Bear.
    
    A reference implementation is available on [Github](https://github.com/Eistbaren/frontend)

  version: 1.0.3
  title: "Reservation Bear API"

host: api.reservation-bear.de/api
basePath: /
tags:
  - name: restaurant
    description: Restaurants
  - name: table
    description: Tables
  - name: reservation
    description: Reservations
  - name: image
    description: Images

schemes:
  - https
paths:
  /restaurant:
    get:
      tags:
        - restaurant
      summary: "get and filter restaurants"
      description: ""
      operationId: getRestaurants
      produces:
        - application/json
      parameters:
      - name: "filters"
        in: query
        description: >-
          available filters:

          **query**: *string*, query for seaching restaurants

          **type**: *string*, type of restaurant e.g. Italian

          **priceCategory**: *integer (1-3)*

          **location**: *array[lat, lon]*

          **radius**: *integer*, radius around the location to search

          **averageRating**: *integer (1-5)*

          **timeFrom**: *unix-timestamp*

          **timeTo**: *unix-timestamp*

          **numberVisitors**: *integer*
        required: false
        type: array
        items:
          type: string
          format: special
      - { name: "currentPage", in: query, type: integer }
      - { name: "pageSize", in: query, type: integer }
      responses:
        '200':
          description: "detailed information about all restaurants matching the filters"

          schema:
            allOf:
              - $ref: "#/definitions/Paginated"
              - type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/definitions/Restaurant'
  /restaurant/{id}:
    get:
      tags:
        - restaurant
      summary: "get detailed information about a restaurant"
      description: ""
      operationId: getRestaurant
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
        format: uuid
      produces:
        - application/json
      responses:
        '200':
          description: "detailed information about the restaurant"
          schema:
            $ref: '#/definitions/Restaurant'

  /restaurant/{id}/comment:
    get:
      tags:
        - restaurant
      summary: "get user- comments and reviews of a restaurant"
      description: ""
      operationId: getRestaurantComments
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
        format: uuid
      - { name: "currentPage", in: query, type: integer }
      - { name: "pageSize", in: query, type: integer }
      produces:
        - application/json
      responses:
        '200':
          description: "user comments- and reviews of the restaurant"
          schema:
            allOf:
              - $ref: "#/definitions/Paginated"
              - type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/definitions/Comment'

  /restaurant/{id}/table:
    get:
      tags:
        - restaurant
      summary: "get all tables and their position in a restaurant"
      description: ""
      operationId: getRestaurantTables
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
        format: uuid
      - { name: "currentPage", in: query, type: integer }
      - { name: "pageSize", in: query, type: integer }
      produces:
        - application/json
      responses:
        '200':
          description: "all tables in the restaurant"
          schema:
            allOf:
              - $ref: "#/definitions/Paginated"
              - type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/definitions/Table'

  /restaurant/{id}/timeslot:
    get:
      tags:
        - restaurant
      summary: "get reservable timeslots of a restaurant"
      description: ""
      operationId: getRestaurantTimeslots
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
      - name: "date"
        in: query
        description: "date of the timeslots"
        required: true
        type: integer
        format: unix-timestamp
      - { name: "currentPage", in: query, type: integer }
      - { name: "pageSize", in: query, type: integer }
      produces:
        - application/json
      responses:
        '200':
          description: "all reservable time ranges (aka timeslots) on the given day. Reflects the opening times of the restaurant"
          schema:
            allOf:
              - $ref: "#/definitions/Paginated"
              - type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/definitions/Timeslot'

  /restaurant/{id}/reservation:
    get:
      tags:
        - restaurant
      summary: "get reserved tables of a restaurant"
      description: ""
      operationId: getRestaurantReservations
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
      - name: "from"
        in: query
        description: "beginning of the first timeslot"
        required: true
        type: integer
        format: unix-timestamp
      - name: "to"
        in: query
        description: "ending of the last timeslot"
        required: true
        type: integer
        format: unix-timestamp
      - { name: "currentPage", in: query, type: integer }
      - { name: "pageSize", in: query, type: integer }
      produces:
        - application/json
      responses:
        '200':
          description: "all timeslots within the given range. In addition to that, every timeslot contains a list of tables which are reserved during the timeslot."
          schema:
            allOf:
              - $ref: "#/definitions/Paginated"
              - type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        timeslot:
                          $ref: '#/definitions/Timeslot'
                        reservedTables:
                          description: "ids of the reserved tables of the timeslot"
                          type: array
                          items:
                            type: string
                            format: uuid
  /table/{id}:
    get:
      tags:
        - table
      summary: "get detailed information about a table"
      description: ""
      operationId: getTable
      parameters:
      - name: "id"
        in: path
        description: "detailed informatin about the table"
        required: true
        type: string
        format: uuid
      produces:
        - application/json
      responses:
        '200':
          description: "the table"
          schema:
            $ref: '#/definitions/Table'


  /reservation:
    post:
      tags:
        - reservation
      summary: "create a reservation"
      description: ""
      operationId: createReservation
      parameters:
      - name: "reservation"
        in: body
        description: "detailed information about the reservation"
        required: true
        schema:
          $ref: '#/definitions/ReservationCreationRequest'
      produces:
        - application/json
      responses:
        '200':
          description: "detailed information about the new reservation"
          schema:
            $ref: '#/definitions/Reservation'

  /reservation/{id}:
    get:
      tags:
        - reservation
      summary: "get detailed information about a reservation"
      description: ""
      operationId: getReservation
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
        format: string
      produces:
        - application/json
      responses:
        '200':
          description: "detailed information about the reservation"
          schema:
            $ref: '#/definitions/Reservation'
    patch:
      tags:
        - reservation
      summary: "confirm a reservation"
      description: ""
      operationId: putReservation
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
      - name: "confirmationToken"
        in: query
        description: "token to confirm the reservation (distributed in the reminder email)"
        required: true
        type: string
        format: token
      - name: "body"
        in: body
        required: true
        schema:
          type: object
          properties:
            confirmed:
              type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: "detailed information about the reservation"
          schema:
            $ref: '#/definitions/Reservation' 
            
    delete:
      tags:
        - reservation
      summary: "delete a reservation"
      description: ""
      operationId: deleteReservation
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
      produces:
        - application/json
      responses:
        '200':
          description: "the deleted reservation"
          schema:
            $ref: '#/definitions/Reservation'

  /reservation/{id}/ics:
    get:
      tags:
        - reservation
      summary: "get a reservation ics file"
      description: ""
      operationId: getReservationIcs
      produces:
      - text/calendar
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
        format: uuid
      responses:
        '200':
          description: "an ics file which contains the reservation"
          schema:
            type: file
            format: ics

  /image/{id}:
    get:
      tags:
        - image
      summary: "get an image by its id"
      produces:
        - application/image
      parameters:
        - name: "id"
          in: path
          description: "the image id"
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: "the requested image file"
          schema:
            type: file
            format: image
      
      

definitions:
  Restaurant:
    type: object
    properties:
      id:
        type: string
        format: uuid
      # == Functional requirements start ==
      name:
        type: string
      images:
        type: array
        items:
          type: string
          format: uuid
      website:
        type: string
        format: uri
      openingHours:
        $ref: '#/definitions/Timeslot'
      averageRating:
        type: number
        format: double
        minimum: 1
        maximum: 5
      # == Functional requirements end ==
      priceCategory:
        type: integer
        minimum: 1
        maximum: 3
      location:
        type: object
        properties:
          lat:
            type: number
            format: double
          lon:
            type: number
            format: double
      floorPlan:
        type: object
        properties:
          image:
            description: "image of the floor plan of the restaurant without tables"
            type: string
            format: uuid
          size:
            description: "size of the floor plan"
            type: object
            properties:
              width:
                type: integer
              height:
                type: integer
    xml:
      name: Restaurant

  Table:
    type: object
    properties:
      id:
        type: string
        format: uuid
      restaurantId:
        type: string
        format: uuid
      seats:
        type: integer
      floorPlan:
        description: "position on the floor plan"
        type: object
        properties:
          position:
            type: object
            properties:
              x:
                type: integer
              y:
                type: integer
          size:
            type: object
            properties:
              x:
                type: integer
              y:
                type: integer
          image: 
            type: string
            format: uuid
            
    xml:
      name: Table

  Reservation:
    type: object
    properties:
      id:
        type: string
        format: uuid
      tables:
        type: array
        items:
          type: string
          format: uuid
      time:
        allOf:
        - description: "the summed up timeslots"
        - $ref: '#/definitions/Timeslot'
      userName:
        type: string
        format: string
      userEmail:
        type: string
        format: email
      confirmed:
        type: boolean
    xml:
      name: Reservation

  ReservationCreationRequest:
    type: object
    properties:
      tables:
        type: array
        items:
          type: string
          format: uuid
      time:
        allOf:
        - description: "the summed up timeslots"
        - $ref: '#/definitions/Timeslot'
      userName:
        type: string
        format: string
      userEmail:
        type: string
        format: email
    xml:
      name: ReservationCreationRequest

  Timeslot:
    type: object
    properties:
      from:
        type: integer
        format: unix-timestamp
      to:
        type: integer
        format: unix-timestamp

  Comment:
    type: object
    properties:
      rating:
        type: integer
        minimum: 1
        maximum: 5
      comment:
        type: string
      name: 
        type: string

  Paginated:
      type: object
      properties:
        totalPages:
          type: number
        currentPage: 
          type: number
        pageSize:
          type: number
        results: 
          type: array
          items: {}
