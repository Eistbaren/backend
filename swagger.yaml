swagger: '2.0'
info:
  description: >- 
    A very cool reservation system
  version: 1.0.0
  title: "Reservation Bear"
host: api.reservation-bear.de
basePath: /
tags:
  - name: restaurant
    description: Restaurants
  - name: table
    description: Tables
  - name: reservation
    description: Reservations
schemes:
  - https
paths:
  /restaurant:
    get:
      tags:
        - restaurant
      summary: "get and search restaurants"
      description: ""
      operationId: getRestaurants
      produces:
        - application/json
      parameters:
      - name: "filters"
        in: query
        description: >-
          filters for seaching restaurants
          query: string, query for seaching restaurants
          type: string, type of restaurant e.g. Italian
          priceCategory: integer (1-3)
          location: array[lat, lon]
          radius: integer, radius around the location to search
          averageRating: integer (1-5)
          timeFrom: unix-timestamp
          timeTo: unix-timestamp
          numberVisitors: integer
        required: false
        type: array
        items:
          type: string
          format: special
      - { name: "currentPage", in: query, type: integer }
      - { name: "pageSize", in: query, type: integer }
      responses:
        '200':
          description: "all different restaurants"
          schema:
            allOf:
              - $ref: "#/definitions/Paginated"
              - type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/definitions/Restaurant'
  /restaurant/{id}:
    get:
      tags:
        - restaurant
      summary: "get specific restaurant"
      description: ""
      operationId: getRestaurant
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
        format: uuid
      produces:
        - application/json
      responses:
        '200':
          description: "the restaurant"
          schema:
            $ref: '#/definitions/Restaurant'

  /restaurant/{id}/comments:
    get:
      tags:
        - restaurant
      summary: "get comments of a restaurant"
      description: ""
      operationId: getRestaurantComments
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
        format: uuid
      - { name: "currentPage", in: query, type: integer }
      - { name: "pageSize", in: query, type: integer }
      produces:
        - application/json
      responses:
        '200':
          description: "the comments"
          schema:
            allOf:
              - $ref: "#/definitions/Paginated"
              - type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/definitions/Comment'

  /restaurant/{id}/tables:
    get:
      tags:
        - restaurant
      summary: "get all tables in the restaurant"
      description: ""
      operationId: getRestaurantTables
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
        format: uuid
      - { name: "currentPage", in: query, type: integer }
      - { name: "pageSize", in: query, type: integer }
      produces:
        - application/json
      responses:
        '200':
          description: "all the tables in the restaurant"
          schema:
            allOf:
              - $ref: "#/definitions/Paginated"
              - type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/definitions/Table'

  /restaurant/{id}/timeslots:
    get:
      tags:
        - restaurant
      summary: "get timeslot infos"
      description: ""
      operationId: getRestaurantTimeslots
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
      - name: "date"
        in: query
        description: "date of the timeslots"
        required: true
        type: integer
        format: unix-timestamp
      - { name: "currentPage", in: query, type: integer }
      - { name: "pageSize", in: query, type: integer }
      produces:
        - application/json
      responses:
        '200':
          description: "all the available timeslots with the reserved table ids"
          schema:
            allOf:
              - $ref: "#/definitions/Paginated"
              - type: object
                properties:
                  results:
                    type: array
                    items:
                      type: array
                      items:
                        type: object
                        properties:
                          reservedTables:
                            description: "ids of the reserved tables of the timeslot, can be empty if no tables are reserved"
                            type: string
                            format: uuid
                          timeslot:
                            $ref: '#/definitions/Timeslot'

  /table/{id}:
    get:
      tags:
        - table
      summary: "get specific table"
      description: ""
      operationId: getTable
      parameters:
      - name: "id"
        in: path
        description: "id of the restaurant"
        required: true
        type: string
        format: uuid
      produces:
        - application/json
      responses:
        '200':
          description: "the table"
          schema:
            $ref: '#/definitions/Table'


  /reservation:
    post:
      tags:
        - reservation
      summary: "create a reservation"
      description: ""
      operationId: createReservation
      parameters:
      - name: "reservation"
        in: body
        description: "the reservation info"
        required: true
        schema:
          $ref: '#/definitions/Reservation' 
      produces:
        - application/json
      responses:
        '200':
          description: "the newly created reservation"
          schema:
            $ref: '#/definitions/Reservation'

  /reservation/{id}:
    get:
      tags:
        - reservation
      summary: "get a reservation"
      description: ""
      operationId: getReservation
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
        format: string
      produces:
        - application/json
      responses:
        '200':
          description: "the reservation"
          schema:
            $ref: '#/definitions/Reservation'
    patch:
      tags:
        - reservation
      summary: "confirm a reservation"
      description: ""
      operationId: putReservation
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
      - name: "confirmationToken"
        in: query
        description: "Token to confirm the reservation(distributed in the reminder email)"
        required: true
        type: string
        format: token
      - name: "body"
        in: body
        required: true
        schema:
          type: object
          properties:
            confirmed:
              type: boolean
        
      produces:
        - application/json
      responses:
        '200':
          description: "the reservation"
          schema:
            $ref: '#/definitions/Reservation' 
            
    delete:
      tags:
        - reservation
      summary: "delete a reservation"
      description: ""
      operationId: deleteReservation
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
      produces:
        - application/json
      responses:
        '200':
          description: "the deleted reservation"
          schema:
            $ref: '#/definitions/Reservation'

  /reservation/{id}/ics:
    get:
      tags:
        - reservation
      summary: "get a reservation ics file"
      description: ""
      operationId: getReservationIcs
      produces:
      - text/calendar
      parameters:
      - name: "id"
        in: path
        description: "the reservation id"
        required: true
        type: string
      responses:
        '200':
          description: "ics file"
          schema:
            type: file
            format: ics


definitions:
  Restaurant:
    type: object
    properties:
      id:
        type: string
        format: uuid
      # == Functional requirements start ==
      images:
        type: array
        items:
          type: string
          format: uri
      website:
        type: string
        format: uri
      openingHours:
        type: array
        items:
          $ref: '#/definitions/Timeslot'
      averageRating:
        type: number
        format: double
        minimum: 1
        maximum: 5
      # == Functional requirements end ==
      priceCategory:
        type: integer
        minimum: 1
        maximum: 3
      location:
        type: object
        properties:
          lat:
            type: number
            format: double
          lon:
            type: number
            format: double
      floorPlan:
        type: object
        properties:
          image:
            description: "image of the floor plan of the restaurant without tables"
            type: string
            format: uri
          size:
            description: "size of the floor plan"
            type: object
            properties:
              width:
                type: integer
              height:
                type: integer
    xml:
      name: Restaurant
  Table:
    type: object
    properties:
      id:
        type: string
        format: uuid
      restaurantId:
        type: string
        format: uuid
      seats:
        type: integer
      floorPlan:
        description: "position on the floor plan"
        type: object
        properties:
          position:
            type: object
            properties:
              x:
                type: integer
              y:
                type: integer
          size:
            type: object
            properties:
              x:
                type: integer
              y:
                type: integer
          image: 
            type: string
            format: uri
            
    xml:
      name: Table
  Reservation:
    type: object
    properties:
      id:
        type: string
        format: uuid
      tables:
        type: array
        items:
          type: string
          format: uuid
      time:
        allOf:
        - description: "the summed up timeslots"
        - $ref: '#/definitions/Timeslot'
      userName:
        type: string
        format: string
      userEmail:
        type: string
        format: email
      confirmed:
        type: boolean
    xml:
      name: Reservation
  Timeslot:
    type: object
    properties:
      from:
        type: integer
        format: unix-timestamp
      to:
        type: integer
        format: unix-timestamp
  Comment:
    type: object
    properties:
      rating:
        type: integer
        minimum: 1
        maximum: 5
      comment:
        type: string
      name: 
        type: string
  Paginated:
      type: object
      properties:
        totalPages:
          type: number
        currentPage: 
          type: number
        pageSize:
          type: number
        results: 
          type: array
          items: {}
